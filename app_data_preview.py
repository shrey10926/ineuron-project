# Code Generated by Sidekick is for learning and experimentation purposes only.
import json, os, socket, sys
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QGridLayout, QLineEdit, QLabel, 
                             QPushButton, QMessageBox, QStatusBar, QFrame,
                             QDialog, QDialogButtonBox, QTextEdit)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPalette, QValidator

# Constants
DEVICE_IP = '192.168.1.101'
DEVICE_PORT = 20108

CURRENCY_NAMES = {
    "A": "USD_TTB", "B": "GBP_TTB", "C": "EUR_TTB", "D": "JPY_TTB", "E": "CAD_TTB",
    "F": "USD_TTS", "G": "GBP_TTS", "H": "EUR_TTS", "I": "JPY_TTS", "J": "CAD_TTS",
    "K": "USD_BLB", "L": "GBP_BLB", "M": "EUR_BLB", "N": "JPY_BLB", "O": "CAD_BLB",
    "P": "USD_BLS", "Q": "GBP_BLS", "R": "EUR_BLS", "S": "JPY_BLS", "T": "CAD_BLS",
    "U": "USD_FCB", "V": "GBP_FCB", "W": "EUR_FCB", "X": "JPY_FCB", "Y": "CAD_FCB",
    "Z": "USD_FCS", "a": "GBP_FCS", "b": "EUR_FCS", "c": "JPY_FCS", "d": "CAD_FCS"
}

OVERFLOW_POSITIONS = {
    'A': ('ZZ', 3), 'B': ('ZZ', 2), 'C': ('ZZ', 1), 'D': ('ZZ', 0), 'E': ('YY', 3),
    'F': ('YY', 2), 'G': ('YY', 1), 'H': ('YY', 0), 'I': ('XX', 3), 'J': ('XX', 2),
    'K': ('XX', 1), 'L': ('XX', 0), 'M': ('WW', 3), 'N': ('WW', 2), 'O': ('WW', 1),
    'P': ('WW', 0), 'Q': ('VV', 3), 'R': ('VV', 2), 'S': ('VV', 1), 'T': ('VV', 0),
    'U': ('UU', 3), 'V': ('UU', 2), 'W': ('UU', 1), 'X': ('UU', 0), 'Y': ('TT', 3),
    'Z': ('TT', 2), 'a': ('TT', 1), 'b': ('TT', 0), 'c': ('SS', 3), 'd': ('SS', 2)
}

OVERFLOW_MODULES = ['ZZ', 'YY', 'XX', 'WW', 'VV', 'UU', 'TT', 'SS']
BASE_CURRENCIES = ['USD', 'GBP', 'EUR', 'JPY', 'CAD']
RATE_TYPES = ['TTB', 'TTS', 'BLB', 'BLS', 'FCB', 'FCS']

# Custom Validator for Rate Input
class RateValidator(QValidator):
    # Code Generated by Sidekick is for learning and experimentation purposes only.
    def validate(self, input_str, pos):
        if not input_str:
            return QValidator.Intermediate, input_str, pos
        
        if not input_str.isdigit():
            return QValidator.Invalid, input_str, pos
        
        if len(input_str) > 5:
            return QValidator.Invalid, input_str, pos
        
        if len(input_str) < 3:
            return QValidator.Intermediate, input_str, pos
        
        return QValidator.Acceptable, input_str, pos

# Preview Dialog
class PreviewDialog(QDialog):
    # Code Generated by Sidekick is for learning and experimentation purposes only.
    def __init__(self, preview_data, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Display Preview")
        self.setModal(True)
        self.resize(600, 400)
        
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("Forex Board Display Preview")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin: 10px;")
        layout.addWidget(title)
        
        # Preview area
        preview_frame = QFrame()
        preview_frame.setFrameStyle(QFrame.Box)
        preview_frame.setStyleSheet("""
            QFrame { 
                background-color: black; 
                border: 3px solid #34495e; 
                border-radius: 10px; 
                margin: 10px; 
            }
        """)
        preview_layout = QVBoxLayout(preview_frame)
        
        # Display preview text
        preview_text = QTextEdit()
        preview_text.setReadOnly(True)
        preview_text.setFont(QFont("Courier", 12, QFont.Bold))
        preview_text.setStyleSheet("""
            QTextEdit { 
                background-color: black; 
                color: lime; 
                border: none; 
                padding: 15px;
            }
        """)
        
        # Format preview data
        preview_content = "FOREX BOARD DISPLAY:\n\n"
        for currency_rate, display_value in preview_data.items():
            preview_content += f"{currency_rate:12} â†’ {display_value}\n"
        
        preview_text.setPlainText(preview_content)
        preview_layout.addWidget(preview_text)
        layout.addWidget(preview_frame)
        
        # Buttons
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)

# Enhanced Input Field with Preview
class RateInputField(QLineEdit):
    # Code Generated by Sidekick is for learning and experimentation purposes only.
    def __init__(self, currency_rate_key, parent=None):
        super().__init__(parent)
        self.currency_rate_key = currency_rate_key
        self.preview_label = None
        self.setup_field()
        
    def setup_field(self):
        self.setMaxLength(5)
        self.setPlaceholderText("3-5 digits")
        self.setAlignment(Qt.AlignCenter)
        self.setFont(QFont("Arial", 11))
        self.setMinimumHeight(38)  # Taller input box
        
        # Set validator
        self.setValidator(RateValidator())
        
        # Connect text change signal
        self.textChanged.connect(self.on_text_changed)
        
        # Set initial style
        self.set_neutral_style()
    
    def set_neutral_style(self):
        self.setStyleSheet("""
            QLineEdit {
                padding: 10px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
                font-size: 11px;
            }
            QLineEdit:focus {
                border-color: #3498db;
            }
        """)
    
    def set_valid_style(self):
        self.setStyleSheet("""
            QLineEdit {
                padding: 10px;
                border: 2px solid #27ae60;
                border-radius: 5px;
                background-color: #f8fff8;
                font-size: 11px;
            }
            QLineEdit:focus {
                border-color: #27ae60;
            }
        """)
    
    def set_invalid_style(self):
        self.setStyleSheet("""
            QLineEdit {
                padding: 10px;
                border: 2px solid #e74c3c;
                border-radius: 5px;
                background-color: #fff5f5;
                font-size: 11px;
            }
            QLineEdit:focus {
                border-color: #e74c3c;
            }
        """)
    
    def set_intermediate_style(self):
        self.setStyleSheet("""
            QLineEdit {
                padding: 10px;
                border: 2px solid #f39c12;
                border-radius: 5px;
                background-color: #fffbf0;
                font-size: 11px;
            }
            QLineEdit:focus {
                border-color: #f39c12;
            }
        """)
    
    def on_text_changed(self, text):
        if not text:
            self.set_neutral_style()
            self.update_preview("")
            return
        
        # Validate input
        if not text.isdigit():
            self.set_invalid_style()
            self.update_preview("ERROR: Only numbers allowed")
            return
        
        if len(text) < 3:
            self.set_intermediate_style()
            self.update_preview(f"Need {3 - len(text)} more digit(s)")
            return
        
        if len(text) > 5:
            self.set_invalid_style()
            self.update_preview("ERROR: Maximum 5 digits")
            return
        
        # Valid input - calculate preview
        self.set_valid_style()
        preview = self.calculate_display_preview(text)
        self.update_preview(f"Display: {preview}")
    
    def calculate_display_preview(self, rate_value):
        """Calculate what will be shown on the display"""
        padded_rate = rate_value.zfill(5)
        main_digits = padded_rate[:4]
        fifth_digit = padded_rate[4]
        
        # Format: XXX.YZ (decimal after 3rd digit)
        display_text = f"{main_digits[:3]}.{main_digits[3]}{fifth_digit}"
        return display_text
    
    def update_preview(self, preview_text):
        if self.preview_label:
            self.preview_label.setText(preview_text)
            
            # Style the preview label based on content - BIGGER AND MORE VISIBLE
            if "ERROR" in preview_text:
                self.preview_label.setStyleSheet("""
                    color: #e74c3c; 
                    font-size: 13px; 
                    font-weight: bold; 
                    background-color: #ffebee; 
                    padding: 4px; 
                    border-radius: 4px;
                    border: 1px solid #e74c3c;
                """)
            elif "Need" in preview_text:
                self.preview_label.setStyleSheet("""
                    color: #f39c12; 
                    font-size: 13px; 
                    font-weight: bold; 
                    background-color: #fff8e1; 
                    padding: 4px; 
                    border-radius: 4px;
                    border: 1px solid #f39c12;
                """)
            elif "Display:" in preview_text:
                self.preview_label.setStyleSheet("""
                    color: #27ae60; 
                    font-size: 14px; 
                    font-weight: bold; 
                    background-color: #e8f5e8; 
                    padding: 5px; 
                    border-radius: 5px;
                    border: 2px solid #27ae60;
                """)
            else:
                self.preview_label.setStyleSheet("""
                    color: #7f8c8d; 
                    font-size: 12px; 
                    font-style: italic; 
                    padding: 3px;
                """)

# ForexController class (unchanged)
class ForexController:
    # Code Generated by Sidekick is for learning and experimentation purposes only.
    def __init__(self, state_file='forex_state_expanded.json'):
        self.client_socket = None
        self.state_file = state_file
        
        self.state = {
            'main_modules': {},
            'overflow_modules': {},
            'last_updated': None
        }
        
        for module_code in CURRENCY_NAMES.keys():
            self.state['main_modules'][module_code] = '0000'
        
        for module_name in OVERFLOW_MODULES:
            self.state['overflow_modules'][module_name] = ['0', '0', '0', '0']
        
        self.load_state()

    def load_state(self):
        try:
            if os.path.exists(self.state_file):
                with open(self.state_file, 'r') as f:
                    saved_state = json.load(f)
                    
                    if 'main_modules' in saved_state:
                        for module_code in CURRENCY_NAMES.keys():
                            if module_code in saved_state['main_modules']:
                                self.state['main_modules'][module_code] = saved_state['main_modules'][module_code]
                    
                    if 'overflow_modules' in saved_state:
                        for module_name in OVERFLOW_MODULES:
                            if module_name in saved_state['overflow_modules']:
                                self.state['overflow_modules'][module_name] = saved_state['overflow_modules'][module_name]
                    
                    if 'last_updated' in saved_state:
                        self.state['last_updated'] = saved_state['last_updated']
        except Exception as e:
            pass

    def save_state(self):
        try:
            self.state['last_updated'] = datetime.now().isoformat()
            with open(self.state_file, 'w') as f:
                json.dump(self.state, f, indent=2)
            return True
        except Exception as e:
            return False

    def send_command(self, command):
        try:
            if self.client_socket:
                # self.client_socket.send(command.encode())
                return True
        except Exception as e:
            return False

    def connect_to_device(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.settimeout(5)
            # self.client_socket.connect((DEVICE_IP, DEVICE_PORT))
            return True
        except Exception as e:
            return False

    def update_overflow_module(self, currency_code, fifth_digit):
        if currency_code not in OVERFLOW_POSITIONS:
            return False
        
        module_name, position = OVERFLOW_POSITIONS[currency_code]
        
        if module_name not in self.state['overflow_modules']:
            self.state['overflow_modules'][module_name] = ['0', '0', '0', '0']
        
        self.state['overflow_modules'][module_name][position] = fifth_digit
        
        overflow_command = module_name + ''.join(self.state['overflow_modules'][module_name])
        
        return self.send_command(overflow_command)

    def set_currency_rate(self, currency_code, rate_value):
        if not (3 <= len(rate_value) <= 5):
            return False
        
        padded_rate = rate_value.zfill(5)
        main_digits = padded_rate[:4]
        fifth_digit = padded_rate[4]

        main_success = self.send_command(f"{currency_code}{main_digits}")
        overflow_success = self.update_overflow_module(currency_code, fifth_digit)

        if main_success and overflow_success:
            self.state['main_modules'][currency_code] = main_digits
            return True
        
        return False

    def get_full_currency_value(self, currency_code):
        main_value = self.state['main_modules'][currency_code]
        module_name, position = OVERFLOW_POSITIONS[currency_code]
        overflow_digit = self.state['overflow_modules'][module_name][position]
        return main_value + overflow_digit

    def close_connection(self):
        if self.client_socket:
            self.client_socket.close()

# Enhanced ForexGUI with Bigger Preview
class ForexGUI(QMainWindow):
    # Code Generated by Sidekick is for learning and experimentation purposes only.
    def __init__(self):
        super().__init__()
        self.controller = ForexController()
        self.rate_inputs = {}
        self.preview_labels = {}
        self.is_connected = False
        self.init_ui()
        self.load_current_rates()
        
    def init_ui(self):
        self.setWindowTitle("Forex Rate Controller with Enhanced Preview")
        self.setGeometry(100, 100, 1300, 950)  # Made bigger for larger previews
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout(central_widget)
        
        # Title
        title = QLabel("Forex Rate Controller with Live Preview")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin: 10px;")
        main_layout.addWidget(title)
        
        # Connection status
        self.connection_status = QLabel("Status: Disconnected")
        self.connection_status.setAlignment(Qt.AlignCenter)
        self.connection_status.setStyleSheet("color: red; font-weight: bold; margin: 5px;")
        main_layout.addWidget(self.connection_status)
        
        # Instructions
        instructions = QLabel("Enter 3-5 digits. Preview shows display format (XXX.YZ with decimal after 3rd digit)")
        instructions.setAlignment(Qt.AlignCenter)
        instructions.setStyleSheet("color: #7f8c8d; font-style: italic; margin: 5px;")
        main_layout.addWidget(instructions)
        
        # Matrix container
        matrix_frame = QFrame()
        matrix_frame.setFrameStyle(QFrame.Box)
        matrix_frame.setStyleSheet("QFrame { border: 2px solid #34495e; border-radius: 10px; margin: 10px; }")
        matrix_layout = QVBoxLayout(matrix_frame)
        
        # Matrix grid
        grid_widget = QWidget()
        grid_layout = QGridLayout(grid_widget)
        grid_layout.setSpacing(15)  # More space between cells
        grid_layout.setVerticalSpacing(18)  # Extra vertical space for bigger previews
        grid_layout.setHorizontalSpacing(12)  # Horizontal space
        
        # Empty top-left cell
        empty_cell = QLabel("")
        grid_layout.addWidget(empty_cell, 0, 0)
        
        # Column headers (Rate Types)
        for col, rate_type in enumerate(RATE_TYPES):
            header = QLabel(rate_type)
            header.setAlignment(Qt.AlignCenter)
            header.setFont(QFont("Arial", 11, QFont.Bold))
            header.setStyleSheet("background-color: #3498db; color: white; padding: 8px; border-radius: 5px;")
            grid_layout.addWidget(header, 0, col + 1)
        
        # Row headers (Currencies) and input boxes with previews
        for row, currency in enumerate(BASE_CURRENCIES):
            # Row header
            header = QLabel(currency)
            header.setAlignment(Qt.AlignCenter)
            header.setFont(QFont("Arial", 11, QFont.Bold))
            header.setStyleSheet("background-color: #2ecc71; color: white; padding: 8px; border-radius: 5px;")
            grid_layout.addWidget(header, row + 1, 0)
            
            # Input boxes and preview labels for each rate type
            for col, rate_type in enumerate(RATE_TYPES):
                # Create container for input and preview with better spacing
                container = QWidget()
                container.setMinimumWidth(130)  # Ensure minimum width for bigger previews
                container.setMinimumHeight(80)  # Ensure minimum height
                container_layout = QVBoxLayout(container)
                container_layout.setContentsMargins(5, 5, 5, 5)  # More margin
                container_layout.setSpacing(8)  # Good spacing between input and preview
                
                # Enhanced input box
                key = f"{currency}_{rate_type}"
                input_box = RateInputField(key)
                input_box.setMinimumHeight(40)  # Taller input box
                
                # Preview label - MUCH MORE VISIBLE
                preview_label = QLabel("")
                preview_label.setAlignment(Qt.AlignCenter)
                preview_label.setFont(QFont("Arial", 12, QFont.Bold))  # Bigger font
                preview_label.setStyleSheet("""
                    color: #7f8c8d; 
                    font-size: 12px; 
                    font-style: italic; 
                    padding: 4px;
                    min-height: 28px;
                    max-height: 35px;
                    border-radius: 3px;
                """)
                preview_label.setWordWrap(True)  # Allow text wrapping if needed
                
                # Connect input to preview label
                input_box.preview_label = preview_label
                
                # Add to container
                container_layout.addWidget(input_box)
                container_layout.addWidget(preview_label)
                
                # Store references
                self.rate_inputs[key] = input_box
                self.preview_labels[key] = preview_label
                
                grid_layout.addWidget(container, row + 1, col + 1)
        
        matrix_layout.addWidget(grid_widget)
        main_layout.addWidget(matrix_frame)
        
        # Control buttons
        button_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("Connect to Device")
        self.connect_btn.setFont(QFont("Arial", 10, QFont.Bold))
        self.connect_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.connect_btn.clicked.connect(self.connect_device)
        button_layout.addWidget(self.connect_btn)
        
        # Preview All button
        self.preview_btn = QPushButton("Preview All Changes")
        self.preview_btn.setFont(QFont("Arial", 10, QFont.Bold))
        self.preview_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        self.preview_btn.clicked.connect(self.show_preview_dialog)
        button_layout.addWidget(self.preview_btn)
        
        self.submit_btn = QPushButton("Submit All Changes")
        self.submit_btn.setFont(QFont("Arial", 10, QFont.Bold))
        self.submit_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #5dade2;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.submit_btn.clicked.connect(self.submit_rates)
        self.submit_btn.setEnabled(False)
        button_layout.addWidget(self.submit_btn)
        
        self.clear_btn = QPushButton("Clear All Fields")
        self.clear_btn.setFont(QFont("Arial", 10, QFont.Bold))
        self.clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #f39c12;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
        """)
        self.clear_btn.clicked.connect(self.clear_all_fields)
        button_layout.addWidget(self.clear_btn)
        
        main_layout.addLayout(button_layout)

        # Status bar
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("Ready - Enter rates to see live preview")

    def show_preview_dialog(self):
        """Show a dialog with all current input previews"""
        preview_data = {}
        
        for key, input_box in self.rate_inputs.items():
            rate_value = input_box.text().strip()
            if rate_value and rate_value.isdigit() and 3 <= len(rate_value) <= 5:
                display_preview = input_box.calculate_display_preview(rate_value)
                preview_data[key] = display_preview
        
        if not preview_data:
            QMessageBox.information(self, "No Preview", "No valid rates entered to preview.")
            return
        
        dialog = PreviewDialog(preview_data, self)
        if dialog.exec_() == QDialog.Accepted:
            # User clicked OK in preview - they can proceed to submit
            pass

    def load_current_rates(self):
        # Load current rates from controller state into input boxes
        for key, input_box in self.rate_inputs.items():
            currency, rate_type = key.split('_')
            target_name = f"{currency}_{rate_type}"

            # Find module code for this currency-rate combination
            module_code = None
            for code, name in CURRENCY_NAMES.items():
                if name == target_name:
                    module_code = code
                    break
            
            if module_code:
                full_value = self.controller.get_full_currency_value(module_code)
                # Only load if not default value
                if full_value != "00000":
                    input_box.setText(full_value)
        
        # Update status with last updated time
        if self.controller.state['last_updated']:
            self.status_bar.showMessage(f"Rates loaded - Last updated: {self.controller.state['last_updated'][:19]}")
    
    def connect_device(self):
        if self.controller.connect_to_device():
            self.is_connected = True
            self.connection_status.setText("Status: Connected")
            self.connection_status.setStyleSheet("color: green; font-weight: bold; margin: 5px;")
            self.connect_btn.setText("Connected")
            self.connect_btn.setEnabled(False)
            self.submit_btn.setEnabled(True)
            self.status_bar.showMessage("Connected to device successfully")
        else:
            QMessageBox.critical(self, "Connection Error", 
                               f"Failed to connect to device at {DEVICE_IP}:{DEVICE_PORT}")
            self.status_bar.showMessage("Connection failed")
    
    def submit_rates(self):
        if not self.is_connected:
            QMessageBox.warning(self, "Not Connected", "Please connect to device first")
            return
        
        # Find all input boxes that have valid values
        fields_to_process = []
        for key, input_box in self.rate_inputs.items():
            rate_value = input_box.text().strip()
            if rate_value and rate_value.isdigit() and 3 <= len(rate_value) <= 5:
                fields_to_process.append((key, input_box, rate_value))
        
        if not fields_to_process:
            QMessageBox.warning(self, "No Valid Data", "Please enter valid rates (3-5 digits) before submitting")
            return
        
        # Show confirmation dialog with preview
        preview_data = {}
        for key, input_box, rate_value in fields_to_process:
            display_preview = input_box.calculate_display_preview(rate_value)
            preview_data[key] = display_preview
        
        dialog = PreviewDialog(preview_data, self)
        dialog.setWindowTitle("Confirm Changes")
        
        if dialog.exec_() != QDialog.Accepted:
            return  # User cancelled
        
        # Process the submissions
        success_count = 0
        total_count = len(fields_to_process)
        failed_updates = []
        
        for key, input_box, rate_value in fields_to_process:
            currency, rate_type = key.split('_')
            target_name = f"{currency}_{rate_type}"
            
            # Find module code for this currency-rate combination
            module_code = None
            for code, name in CURRENCY_NAMES.items():
                if name == target_name:
                    module_code = code
                    break
            
            if module_code:
                if self.controller.set_currency_rate(module_code, rate_value):
                    success_count += 1
                    # Clear the input field after successful submission
                    input_box.clear()
                else:
                    failed_updates.append(f"{currency} {rate_type}")
            else:
                failed_updates.append(f"{currency} {rate_type} (mapping not found)")
        
        # Save state after updates
        self.controller.save_state()
        
        # Show results
        if success_count == total_count:
            QMessageBox.information(self, "Success", f"All {total_count} rates updated successfully!")
            self.status_bar.showMessage(f"Successfully updated {total_count} rates")
        elif success_count > 0:
            failed_text = "\n".join(failed_updates)
            QMessageBox.warning(self, "Partial Success", 
                              f"Updated {success_count}/{total_count} rates.\n\nFailed:\n{failed_text}")
            self.status_bar.showMessage(f"Updated {success_count}/{total_count} rates")
        else:
            failed_text = "\n".join(failed_updates)
            QMessageBox.critical(self, "Update Failed", 
                               f"Failed to update any rates.\n\nFailed:\n{failed_text}")
            self.status_bar.showMessage("Update failed")
    
    def clear_all_fields(self):
        """Clear all input fields and reset their styling"""
        for input_box in self.rate_inputs.values():
            input_box.clear()
            input_box.set_neutral_style()
        
        # Clear all preview labels
        for preview_label in self.preview_labels.values():
            preview_label.setText("")
            preview_label.setStyleSheet("""
                color: #7f8c8d; 
                font-size: 12px; 
                font-style: italic; 
                padding: 4px;
                min-height: 28px;
                max-height: 35px;
                border-radius: 3px;
            """)
        
        self.status_bar.showMessage("All fields cleared - Enter rates to see live preview")
    
    def closeEvent(self, event):
        # Clean up connection when closing
        self.controller.close_connection()
        event.accept()

def main():
    # Code Generated by Sidekick is for learning and experimentation purposes only.
    app = QApplication(sys.argv)
    
    # Set application style
    app.setStyle('Fusion')
    
    # Set application-wide font
    app.setFont(QFont("Arial", 10))
    
    window = ForexGUI()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
