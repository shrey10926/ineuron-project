# Code Generated by Sidekick is for learning and experimentation purposes only.
import socket

# Device configuration
DEVICE_IP = '192.168.1.101'
DEVICE_PORT = 20108

def connect_to_device():
    """Connects to the Forex device."""
    try:
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # client_socket.connect((DEVICE_IP, DEVICE_PORT))
        print(f"Connected to {DEVICE_IP}:{DEVICE_PORT}")
        return client_socket
    except socket.error as e:
        print(f"Failed to connect to the device: {e}")
        # return None
        return True

def parse_input(user_input):
    """
    Parses input in format: A12345 (currency + rate, no spaces)
    
    :param user_input: String like "A12345"
    :return: (currency, rate) tuple or (None, None) if invalid
    """
    if len(user_input) < 2:
        return None, None
    
    currency = user_input[0]
    rate_str = user_input[1:]
    
    # Validate currency
    if currency not in ['A', 'B', 'C', 'D', 'E']:
        return None, None
    
    # Validate rate is numeric
    if not rate_str.isdigit():
        return None, None
    
    rate = int(rate_str)
    
    # Validate rate range
    if rate < 1 or rate > 99999:
        return None, None
    
    return currency, rate

def send_rate(client_socket, currency, rate):
    """
    Sends any rate (1-99999) to the device using two modules.
    Main module shows first 4 digits, overflow shows last digit (padded).
    
    :param client_socket: Connected socket object
    :param currency: Currency letter (A, B, C, D, E)
    :param rate: Rate value (1 to 99999)
    :return: True if successful, False otherwise
    """
    try:
        # Convert rate to 5-digit string with leading zeros
        print(f'RATE : {rate}')
        rate_str = f"{rate:05d}"
        

        # Split: First 4 digits for main, last digit for overflow
        main_digits = rate_str[:4]        # First 4 digits (e.g., "1234")
        last_digit = rate_str[4]          # Last digit (e.g., "5")
        overflow_digits = f"000{last_digit}"  # Pad to 4 digits (e.g., "0005")

        print(f"Rate Str -> {rate_str}\n Main digits -> {main_digits}\n Overflow digits -> {overflow_digits}")
        
        # Send main module command (first 4 digits)
        main_command = f"{currency}{main_digits}"
        # client_socket.sendall(main_command.encode())
        print(f"Sent main: {main_command}")
        
        # Send overflow module command (last digit padded)
        overflow_command = f"{currency}O{overflow_digits}"
        # client_socket.sendall(overflow_command.encode())
        print(f"Sent overflow: {overflow_command}")

        # Wait for responses
        for i in range(2):
            # response = client_socket.recv(1024)
            response = True
            if response:
                # print(f"Received: {response.decode()}")
                print(f'Done')

        return True
    except socket.error as e:
        print(f"Socket error while sending data: {e}")
        return False

def main():
    client_socket = connect_to_device()
    if not client_socket:
        return
    
    try:
        while True:
            user_input = input("Enter command (e.g., 'A12345' or 'exit'): ").strip().upper()
            
            if user_input == 'EXIT':
                break
            
            # Parse input without spaces
            currency, rate = parse_input(user_input)
            
            if currency is None:
                print("Invalid format. Use: <Currency><Rate> (e.g., A12345)")
                print("Currency must be A, B, C, D, or E")
                print("Rate must be 1-99999")
                continue
            
            # Send rate
            if send_rate(client_socket, currency, rate):
                print(f"Successfully updated {currency} to {rate}")
            else:
                print("Failed to update the device.")
                
    finally:
        # client_socket.close()
        print("Connection closed.")

if __name__ == "__main__":
    main()
